import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/api/Items.bs"
import "pkg:/source/api/sdk.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.top.functionName = "loadItems"
end sub

function loadLibraries() as object
    results = []

    data = api.GetUserViews({ "userId": m.global.session.user.id })

    if not isChainValid(data, "items") then return results

    listData = loadMyList()

    if isValidAndNotEmpty(listData)
        data.items.unshift({
            id: listData[0].json.LookupCI("playlistid"),
            name: `My List`,
            Type: ItemType.COLLECTIONFOLDER,
            CollectionType: ItemType.MYLIST
        })
    end if

    for each item in data.LookupCI("items")
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.json = {
            id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

function loadLatestMedia() as object
    results = []

    params = {
        userId: m.global.session.user.id,
        limit: 25,
        parentId: m.top.itemId,
        enableImageTypes: `${ImageType.PRIMARY}, ${ImageType.BACKDROP}, ${ImageType.THUMB}`,
        imageTypeLimit: 1,
        enableTotalRecordCount: false
    }

    data = api.items.GetLatest(params)

    if not isValidAndNotEmpty(data) then return results

    for each item in data
        if not isStringEqual(item.Type, ItemType.BOOK)
            tmp = CreateObject("roSGNode", "HomeData")
            tmp.json = {
                id: item.LookupCI("Id"),
                name: item.LookupCI("name"),
                Type: item.LookupCI("Type"),
                CollectionType: item.LookupCI("CollectionType"),
                ChannelName: item.LookupCI("ChannelName"),
                ChannelId: item.LookupCI("ChannelId"),
                EpisodeTitle: item.LookupCI("EpisodeTitle"),
                ChildCount: item.LookupCI("ChildCount"),
                EndDate: item.LookupCI("EndDate"),
                OfficialRating: item.LookupCI("OfficialRating"),
                ProductionYear: item.LookupCI("ProductionYear"),
                Album: item.LookupCI("Album"),
                SeriesName: item.LookupCI("SeriesName"),
                ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
                IndexNumber: item.LookupCI("IndexNumber"),
                IndexNumberEnd: item.LookupCI("IndexNumberEnd"),
                AlbumArtist: item.LookupCI("AlbumArtist"),
                Status: item.LookupCI("Status"),
                ImageTags: item.LookupCI("ImageTags"),
                UserData: item.LookupCI("UserData"),
                ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
                ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
                ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
                SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
                BackdropImageTags: item.LookupCI("BackdropImageTags")
            }
            results.push(tmp)
        end if
    end for

    return results
end function

function loadContinueWatching() as object
    results = []

    params = {
        recursive: true,
        SortBy: "DatePlayed",
        SortOrder: "Descending",
        Filters: "IsResumable",
        MediaTypes: ItemType.VIDEO,
        excludeItemTypes: ItemType.BOOK,
        EnableTotalRecordCount: false
    }
    data = api.useritems.GetResumeItems(params)

    if not isChainValid(data, "Items") then return results

    for each item in data.Items
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.Id = item.LookupCI("Id")
        tmp.name = item.LookupCI("name")
        tmp.type = item.LookupCI("Type")
        tmp.json = {
            Id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            SeriesName: item.LookupCI("SeriesName"),
            SeriesId: item.LookupCI("SeriesId"),
            SeasonId: item.LookupCI("SeasonId"),
            ProductionYear: item.LookupCI("ProductionYear"),
            Status: item.LookupCI("Status"),
            EndDate: item.LookupCI("EndDate"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumber: item.LookupCI("IndexNumber"),
            IndexNumberEnd: item.LookupCI("IndexNumberEnd"),
            OfficialRating: item.LookupCI("OfficialRating"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbItemId: item.LookupCI("ParentThumbItemId"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

function loadSeasonOfEpisodes() as object
    results = []

    data = TVEpisodes(m.top.showID, m.top.seasonID)

    if not isChainValid(data, "Items") then return results

    for each item in data.LookupCI("items")
        tmp = CreateObject("roSGNode", "ExtrasData")
        imgParms = {
            "Tags": item.json.ImageTags.Primary,
            MaxWidth: 502,
            MaxHeight: 300
        }
        tmp.posterURL = ImageUrl(item.Id, "Primary", imgParms)

        tmp.json = {
            Id: item.LookupCI("ID"),
            IndexNumber: item.json.LookupCI("IndexNumber"),
            Name: item.json.LookupCI("Name"),
            ParentIndexNumber: item.json.LookupCI("ParentIndexNumber"),
            IndexNumberEnd: item.json.LookupCI("IndexNumberEnd"),
            ProductionYear: item.json.LookupCI("ProductionYear"),
            SeriesName: item.json.LookupCI("SeriesName"),
            EndDate: item.json.LookupCI("EndDate"),
            Type: item.json.LookupCI("Type")
        }
        results.push(tmp)
    end for

    return results
end function

function loadContinueListening() as object
    results = []

    params = {
        recursive: true,
        SortBy: "DatePlayed",
        SortOrder: "Descending",
        Filters: "IsResumable",
        MediaTypes: ItemType.AUDIO,
        EnableTotalRecordCount: false
    }
    data = api.useritems.GetResumeItems(params)

    if not isChainValid(data, "Items") then return results

    for each item in data.Items
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.Id = item.LookupCI("Id")
        tmp.name = item.LookupCI("name")
        tmp.type = item.LookupCI("Type")
        tmp.json = {
            Id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            SeriesName: item.LookupCI("SeriesName"),
            ProductionYear: item.LookupCI("ProductionYear"),
            Status: item.LookupCI("Status"),
            EndDate: item.LookupCI("EndDate"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumberEnd: item.LookupCI("IndexNumberEnd"),
            IndexNumber: item.LookupCI("IndexNumber"),
            OfficialRating: item.LookupCI("OfficialRating"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbItemId: item.LookupCI("ParentThumbItemId"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

function loadMoreLikeThis() as object
    results = []

    params = { "userId": m.global.session.user.id, "limit": 25 }
    data = api.items.GetSimilar(m.top.itemId, params)

    if not isChainValid(data, "Items") then return results

    for each item in data.items
        tmp = CreateObject("roSGNode", "ExtrasData")
        imgParms = {
            "Tags": item.PrimaryImageTag,
            MaxWidth: 384,
            MaxHeight: 196
        }
        if isStringEqual(item.LookupCI("type"), ItemType.MUSICVIDEO)
            imgParms.MaxHeight = 330
            imgParms.MaxWidth = 400
        end if
        tmp.posterURL = ImageUrl(item.Id, "Primary", imgParms)
        tmp.json = {
            Id: item.LookupCI("ID"),
            Name: item.LookupCI("Name"),
            PremiereDate: item.LookupCI("PremiereDate"),
            OfficialRating: item.LookupCI("OfficialRating"),
            ProductionYear: item.LookupCI("ProductionYear"),
            EndDate: item.LookupCI("EndDate"),
            Type: item.LookupCI("Type")
        }
        results.push(tmp)
    end for


    return results
end function

function loadSimilarArtists() as object
    results = []

    params = {
        userId: m.global.session.user.id,
        limit: 19,
        enableImageTypes: `${ImageType.PRIMARY}`
    }
    data = api.artists.GetSimilar(m.top.itemId, params)

    if not isChainValid(data, "Items") then return results

    i = 0
    for each item in data.items
        ' Don't include Various Artists
        if isStringEqual("Various Artists", item.LookupCI("Name"))
            continue for
        end if

        tmp = CreateObject("roSGNode", "MusicArtistData")
        imgParms = {
            "Tags": item.PrimaryImageTag,
            MaxWidth: 270,
            MaxHeight: 270
        }
        tmp.posterURL = ImageUrl(item.Id, "Primary", imgParms)
        tmp.json = {
            Id: item.LookupCI("ID"),
            Name: item.LookupCI("Name"),
            Type: item.LookupCI("Type")
        }
        results.push(tmp)

        i++

        if i = 18 then exit for
    end for


    return results
end function

function loadSpecialFeatures() as object
    results = []

    data = api.items.GetSpecialFeatures(m.top.itemId, { "userId": m.global.session.user.id })

    if not isValidAndNotEmpty(data) then return results

    for each item in data
        tmp = CreateObject("roSGNode", "ExtrasData")
        results.push(tmp)
        params = {
            Tags: item.ImageTags.Primary,
            MaxWidth: 450,
            MaxHeight: 402
        }
        tmp.posterURL = ImageUrl(item.Id, "Primary", params)
        tmp.json = {
            Id: item.LookupCI("ID"),
            Name: item.LookupCI("Name"),
            Type: item.LookupCI("Type"),
            ExtraType: item.LookupCI("ExtraType")
        }
    end for

    return results
end function

function loadLiveTVOnNow() as object
    results = []

    params = {
        userId: m.global.session.user.id,
        isAiring: true,
        limit: 25,
        imageTypeLimit: 1,
        enableImageTypes: `${ImageType.PRIMARY}, ${ImageType.BACKDROP}, ${ImageType.THUMB}`,
        enableTotalRecordCount: false,
        fields: "ChannelInfo,PrimaryImageAspectRatio"
    }

    data = api.liveTV.GetRecommendedPrograms(params)

    if not isChainValid(data, "Items") then return results

    for each item in data.Items
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.json = {
            id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            ImageURL: ImageURL(item.LookupCI("Id")),
            Type: item.LookupCI("Type"),
            mediatype: item.LookupCI("mediatype"),
            CollectionType: item.LookupCI("CollectionType"),
            ChannelName: item.LookupCI("ChannelName"),
            ChannelId: item.LookupCI("ChannelId"),
            EpisodeTitle: item.LookupCI("EpisodeTitle"),
            ChildCount: item.LookupCI("ChildCount"),
            EndDate: item.LookupCI("EndDate"),
            OfficialRating: item.LookupCI("OfficialRating"),
            ProductionYear: item.LookupCI("ProductionYear"),
            Album: item.LookupCI("Album"),
            SeriesName: item.LookupCI("SeriesName"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumberEnd: item.LookupCI("IndexNumberEnd"),
            IndexNumber: item.LookupCI("IndexNumber"),
            AlbumArtist: item.LookupCI("AlbumArtist"),
            Status: item.LookupCI("Status"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

function loadNextUp() as object
    results = []

    params = {
        recursive: true,
        SortBy: "DatePlayed",
        SortOrder: "Descending",
        ImageTypeLimit: 1,
        UserId: m.global.session.user.id,
        EnableRewatching: m.global.session.user.settings["ui.details.enablerewatchingnextup"],
        DisableFirstEpisode: false,
        limit: 25,
        EnableTotalRecordCount: false
    }

    maxDaysInNextUp = m.global.session.user.settings["ui.details.maxdaysnextup"].ToInt()
    if isValid(maxDaysInNextUp)
        if maxDaysInNextUp > 0
            dateToday = CreateObject("roDateTime")
            dateCutoff = CreateObject("roDateTime")

            dateCutoff.FromSeconds(dateToday.AsSeconds() - (maxDaysInNextUp * 86400))

            params.AddReplace("NextUpDateCutoff", dateCutoff.ToISOString())
        end if
    end if

    addViewAll = true ' Assume there will be a "View All" to start
    checkViewAll = false ' Only need to check if we don't have anything in the Next Up home row

    data = api.shows.GetNextUp(params)

    if isChainValid(data, "Items")
        for each item in data.Items
            tmp = CreateObject("roSGNode", "HomeData")
            tmp.json = item
            results.push(tmp)
        end for
        if data.Items.Count() = 0
            checkViewAll = true
        end if
    else
        checkViewAll = true
    end if

    ' Add "View All"
    if checkViewAll
        ' Nothing to show in Next Up, but are there hidden items (e.g. > 365 days old)?
        params.Delete("NextUpDateCutoff")
        params.AddReplace("limit", 1) ' if there is even one, then we know we need to show "View All"
        data = api.shows.GetNextUp(params)
        if not isValid(data) or (isValid(data) and isValid(data.Items) and data.Items.Count() = 0)
            addViewAll = false
        end if
    end if

    if addViewAll
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.type = ItemType.COLLECTIONFOLDER
        tmp.usePoster = false
        tmp.json = {
            IsFolder: true,
            Name: tr("View All Next Up"),
            Type: ItemType.COLLECTIONFOLDER,
            CollectionType: "nextup"
        }
        results.push(tmp)
    end if

    return results
end function

function loadFavorites() as object
    results = []

    params = {
        userid: m.global.session.user.id,
        Filters: "IsFavorite",
        Limit: 25,
        recursive: true,
        sortby: "random",
        EnableTotalRecordCount: false
    }

    data = api.items.Get(params)

    if not isChainValid(data, "Items") then return results

    for each item in data.Items
        if inArray([ItemType.BOOK, ItemType.AUDIO], item.type) then continue for

        tmp = CreateObject("roSGNode", "HomeData")

        params = {
            Tags: item.PrimaryImageTag,
            MaxWidth: 234,
            MaxHeight: 330
        }
        tmp.posterURL = ImageUrl(item.Id, "Primary", params)
        tmp.json = {
            Id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            SeriesName: item.LookupCI("SeriesName"),
            SeriesId: item.LookupCI("SeriesId"),
            SeasonId: item.LookupCI("SeasonId"),
            ProductionYear: item.LookupCI("ProductionYear"),
            Status: item.LookupCI("Status"),
            EndDate: item.LookupCI("EndDate"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumberEnd: item.LookupCI("IndexNumberEnd"),
            IndexNumber: item.LookupCI("IndexNumber"),
            OfficialRating: item.LookupCI("OfficialRating"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbItemId: item.LookupCI("ParentThumbItemId"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

function loadIsInMyList() as object
    results = [false]

    listData = loadMyList()

    for each item in listData
        if isStringEqual(m.top.itemId, item.LookupCI("id"))
            results = [true]
            exit for
        end if
    end for

    return results
end function

function loadMyList() as object
    results = []

    data = api.GetUserViews({ "userId": m.global.session.user.id })
    if not isChainValid(data, "Items") then return results

    myListPlaylist = invalid

    for each item in data.LookupCI("items")
        if isStringEqual(item.LookupCI("CollectionType"), "playlists")
            myListPlaylist = api.items.Get({
                "userid": m.global.session.user.id,
                "includeItemTypes": "Playlist",
                "nameStartsWith": "|My List|",
                "parentId": item.LookupCI("id")
            })
            exit for
        end if
    end for

    if not isValid(myListPlaylist) or not isValidAndNotEmpty(myListPlaylist.items) then return results

    playlistID = myListPlaylist.items[0].LookupCI("id")

    if not isValid(playlistID) then return results

    myListData = api.items.Get({
        UserId: m.global.session.user.id,
        ImageTypeLimit: 1,
        EnableImageTypes: `${ImageType.PRIMARY}, ${ImageType.BACKDROP}, ${ImageType.THUMB}`,
        Limit: 50,
        EnableTotalRecordCount: false,
        ParentId: playlistID
    })

    if not isChainValid(myListData, "Items") then return results

    for each item in myListData.Items
        if inArray([ItemType.BOOK, ItemType.AUDIO], item.type) then continue for

        tmp = CreateObject("roSGNode", "HomeData")

        params = {
            Tags: item.PrimaryImageTag,
            MaxWidth: 234,
            MaxHeight: 330
        }
        tmp.posterURL = ImageUrl(item.Id, "Primary", params)
        tmp.json = {
            PlaylistID: playlistID,
            Id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            SeriesName: item.LookupCI("SeriesName"),
            SeriesId: item.LookupCI("SeriesId"),
            SeasonId: item.LookupCI("SeasonId"),
            ProductionYear: item.LookupCI("ProductionYear"),
            Status: item.LookupCI("Status"),
            EndDate: item.LookupCI("EndDate"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumberEnd: item.LookupCI("IndexNumberEnd"),
            IndexNumber: item.LookupCI("IndexNumber"),
            OfficialRating: item.LookupCI("OfficialRating"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbItemId: item.LookupCI("ParentThumbItemId"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    if myListData.Items.count() > 3
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.id = playlistID
        tmp.type = ItemType.COLLECTIONFOLDER
        tmp.usePoster = false
        tmp.json = {
            id: playlistID,
            PlaylistID: playlistID,
            IsFolder: true,
            Name: tr("View Full List"),
            Type: ItemType.COLLECTIONFOLDER,
            CollectionType: "mylist"
        }
        results.Unshift(tmp)
    end if

    return results
end function

function loadPlaylists() as object
    results = []

    data = api.GetUserViews({ "userId": m.global.session.user.id })
    if not isChainValid(data, "Items") then return results

    playlistData = invalid

    for each item in data.LookupCI("items")
        if isStringEqual(item.LookupCI("CollectionType"), "playlists")
            playlistData = api.items.Get({
                userid: m.global.session.user.id,
                includeItemTypes: "Playlist",
                parentId: item.LookupCI("id"),
                SortBy: "SortName"
            })
            exit for
        end if
    end for

    if not isValid(playlistData) or not isValidAndNotEmpty(playlistData.items) then return results

    for each item in playlistData.Items
        if isStringEqual(item.name, "|My List|") then continue for

        canEditPermission = api.playlists.GetUser(item.id, m.global.session.user.id)
        if not isValid(canEditPermission) then continue for
        if not isChainValid(canEditPermission, "canedit") then continue for
        if not chainLookup(canEditPermission, "canedit") then continue for

        tmp = CreateObject("roSGNode", "PlaylistData")
        tmp.type = "Playlist"
        tmp.title = item.name
        tmp.id = item.id

        results.push(tmp)
    end for

    return results
end function

function loadItemsByPerson(videoType, dimens = {}) as object
    results = []

    params = {
        userid: m.global.session.user.id,
        personIds: m.top.itemId,
        recursive: true,
        includeItemTypes: videoType,
        Limit: 50,
        SortBy: "Random"
    }

    data = api.items.Get(params)

    if not isValidAndNotEmpty(data) then return results

    for each item in data.items
        tmp = CreateObject("roSGNode", "ExtrasData")
        imgParms = { "Tags": item.ImageTags.Primary }
        imgParms.append(dimens)
        tmp.posterURL = ImageUrl(item.Id, "Primary", imgParms)

        tmp.json = {
            Id: item.LookupCI("ID"),
            IndexNumber: item.LookupCI("IndexNumber"),
            Name: item.LookupCI("Name"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumberEnd: item.LookupCI("IndexNumberEnd"),
            ProductionYear: item.LookupCI("ProductionYear"),
            SeriesName: item.LookupCI("SeriesName"),
            EndDate: item.LookupCI("EndDate"),
            Type: item.LookupCI("Type")
        }
        results.push(tmp)
    end for

    return results
end function

function loadPeople() as object
    results = []

    for each person in m.top.peopleList
        tmp = CreateObject("roSGNode", "ExtrasData")
        tmp.Id = person.Id
        tmp.labelText = person.Name
        params = {
            Tags: person.PrimaryImageTag,
            MaxWidth: 234,
            MaxHeight: 330
        }
        tmp.posterURL = ImageUrl(person.Id, "Primary", params)
        tmp.json = {
            type: person.LookupCI("type"),
            Role: person.LookupCI("role")
        }
        results.push(tmp)
    end for

    return results
end function

sub loadItems()
    if not isValidAndNotEmpty(m.global.session.user.id)
        m.top.content = []
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "libraries")
        m.top.content = loadLibraries()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "latest")
        m.top.content = loadLatestMedia()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "continue")
        m.top.content = loadContinueWatching()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "nextUp")
        m.top.content = loadNextUp()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "seasonOfEpisodes")
        m.top.content = loadSeasonOfEpisodes()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "favorites")
        m.top.content = loadFavorites()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "mylist")
        m.top.content = loadMyList()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "playlists")
        m.top.content = loadPlaylists()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "isInMyList")
        m.top.content = loadIsInMyList()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "backdropImage")
        m.top.content = [BackdropImage(m.top.itemId)]
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "audioStream")
        m.top.content = [AudioStream(m.top.itemId)]
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "metaData")
        m.top.content = [ItemMetaData(m.top.itemId)]
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "personSeries")
        m.top.content = loadItemsByPerson(ItemType.SERIES)
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "personTVShows")
        m.top.content = loadItemsByPerson(ItemType.EPISODE, { MaxWidth: 502, MaxHeight: 300 })
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "personMovies")
        m.top.content = loadItemsByPerson(ItemType.MOVIE)
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "people")
        m.top.content = loadPeople()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "likethis")
        m.top.content = loadMoreLikeThis()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "similarartists")
        m.top.content = loadSimilarArtists()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "specialfeatures")
        m.top.content = loadSpecialFeatures()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "continueListening")
        m.top.content = loadContinueListening()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "onNow")
        m.top.content = loadLiveTVOnNow()
        return
    end if

    m.top.content = []
end sub
