import "pkg:/source/api/userauth.brs"

namespace session
    ' Initialize the global session array
    sub Init()
        m.global.addFields({
            session: {
                server: {},
                user: {
                    Configuration: {},
                    Policy: {},
                    settings: {}
                }
            }
        })
    end sub

    ' Empty the global session array
    sub Delete()
        Update("server")
        Update("user")
    end sub

    ' Update one value from the global session array (m.global.session)
    sub Update(key as string, value = {} as object)
        ' validate parameters
        if key = "" or (key <> "user" and key <> "server") or value = invalid
            print "Error in session.Update(): Invalid parameters provided"
            return
        end if
        ' make copy of global session array
        tmpSession = m.global.session
        ' update the temp session array
        tmpSession.AddReplace(key, value)
        ' use the temp session array to update the global node
        m.global.setFields({ session: tmpSession })
        print "m.global.session." + key + " = ", m.global.session[key]
    end sub

    namespace server
        ' Empty the global server session array
        sub Delete()
            session.Update("server")
        end sub

        ' Add or update one value from the global server session array (m.global.session.server)
        sub Update(key as string, value as dynamic)
            ' validate parameters
            if key = "" or value = invalid then return
            ' make copy of global server session array
            tmpSessionServer = m.global.session.server
            ' update the temp server array
            tmpSessionServer[key] = value

            session.Update("server", tmpSessionServer)
        end sub

        ' Add or update the jellyfin server URL from the global server session array (m.global.session.server)
        sub UpdateURL(value as string)
            ' validate parameters
            if value = "" then return
            session.server.Update("url", value)
            session.server.Populate()
        end sub

        ' Use the saved server url to populate the global server session array (m.global.session.server)
        sub Populate()
            ' validate server url
            if m.global.session.server.url = invalid or m.global.session.server.url = "" then return
            ' get server info using API
            myServerInfo = ServerInfo()
            ' validate data returned from API
            if myServerInfo.id = invalid then return
            ' make copy of global server session
            tmpSessionServer = m.global.session.server
            ' update the temp array
            tmpSessionServer.AddReplace("id", myServerInfo.Id)
            tmpSessionServer.AddReplace("name", myServerInfo.ServerName)
            tmpSessionServer.AddReplace("localURL", myServerInfo.LocalAddress)
            tmpSessionServer.AddReplace("os", myServerInfo.OperatingSystem)
            tmpSessionServer.AddReplace("startupWizardCompleted", myServerInfo.StartupWizardCompleted)
            tmpSessionServer.AddReplace("version", myServerInfo.Version)
            tmpSessionServer.AddReplace("hasError", myServerInfo.error)
            ' check urls for https
            isServerHTTPS = false
            if tmpSessionServer.url.left(8) = "https://" then isServerHTTPS = true
            tmpSessionServer.AddReplace("isHTTPS", isServerHTTPS)
            isLocalServerHTTPS = false
            if myServerInfo.LocalAddress <> invalid and myServerInfo.LocalAddress.left(8) = "https://" then isLocalServerHTTPS = true
            tmpSessionServer.AddReplace("isLocalHTTPS", isLocalServerHTTPS)
            ' update global server session using the temp array
            session.Update("server", tmpSessionServer)
        end sub
    end namespace

    namespace user
        ' Empty the global user session array
        sub Delete()
            session.Update("user")
        end sub

        ' Add or update one value from the global user session array (m.global.session.user)
        sub Update(key as string, value as dynamic)
            ' validate parameters
            if key = "" or value = invalid then return
            ' make copy of global user session
            tmpSessionUser = m.global.session.user
            ' update the temp user array
            tmpSessionUser[key] = value
            ' update global user session using the temp array
            session.Update("user", tmpSessionUser)
        end sub

        ' Update the global session after user is authenticated.
        ' Accepts a UserData.xml object from get_token() or an assocArray from AboutMe()
        sub Login(userData as object)
            ' validate parameters
            if userData = invalid or userData.id = invalid then return
            ' make copy of global user session array
            tmpSession = m.global.session
            if userData.json = invalid
                ' we were passed data from AboutMe()
                myAuthToken = tmpSession.user.authToken
                tmpSession.AddReplace("user", userData)
                tmpSession.user.AddReplace("authToken", myAuthToken)
            else
                ' we were passed data from a UserData object
                tmpSession.AddReplace("user", userData.json.User)
                tmpSession.user.AddReplace("authToken", userData.json.AccessToken)
            end if

            userSettings = RegistryReadAll(tmpSession.user.id)
            tmpSession.user.AddReplace("settings", userSettings)
            ' update global user session
            session.Update("user", tmpSession.user)
            print "m.global.session.user.settings = ", m.global.session.user.settings
            ' ensure registry is updated
            set_user_setting("username", tmpSession.user.name)
            set_user_setting("token", tmpSession.user.authToken)
        end sub

        namespace settings
            ' Remove a value from the global user session settings (m.global.session.user.settings)
            sub Delete(key as string)
                ' validate parameters
                if key = "" then return
                ' make copy of global user session settings
                tmpSessionUser = m.global.session.user
                ' delete key from user settings array
                tmpSessionUser.settings.Delete(key)
                ' update global user session using the temp array
                session.Update("user", tmpSessionUser)
            end sub

            ' Add or update one value from the global user session settings array (m.global.session.user.settings)
            sub Update(key as string, value as dynamic)
                ' validate parameters
                if key = "" or value = invalid then return
                ' make copy of global user session settings
                tmpSessionUser = m.global.session.user
                ' update the temp user settings array
                tmpSessionUser.settings[key] = value
                ' update global user session using the temp array
                session.Update("user", tmpSessionUser)
            end sub
        end namespace
    end namespace
end namespace
